#ifndef TESTER_H
#define TESTER_H

#define NUM_THREADS 10
#define ALLOCS_PER_THREAD 100000

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <stdint.h>
#include <pthread.h>
#include <limits.h>
#include "libft.h"
#include <setjmp.h>

#define ATENTION() printf("\n\n\e[1;33m‚ö†Ô∏è  ATTENTION: If the tester segfaults, goes into an infinite loop, or crashes, it means your libft implementation is incorrect! Please review your functions and ensure proper handling of edge cases.\033[0m\n")
#define PASS() printf("  ‚úîÔ∏è  PASS\n")
#define FAIL() printf("  ‚ùå FAIL\n")
#define CHECK() printf("  ‚ö†Ô∏è  CHECK AGAIN\n")
#define TITLE(func) printf("\e[0;36m\n\n ========= %s TESTS =========== \n\n\e[0m", func)
#define END(x) ((x) == 0 ? printf("\n\n\nüéâ\e[1;32m --- CONGRATULATIONS!! YOU PASSED ALL THE TESTS! MAY THE FORCE BE WITH YOU --- \e[0müéâ\n\n\n") \
						 : printf("\n\n\nüò¢\e[1;31m --- SADLY YOU DID NOT PASS THE TESTS. YOU HAVE [%d] ERRORS. BETTER LUCK NEXT TIME --- \e[0müò¢\n\n\n", x))

#define HEADER() printf("\e[0;32m‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£§‚†§‚†ê‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°å‚°¶‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚£º‚°ä‚¢Ä‚†î‚†Ä‚†Ä‚£Ñ‚†§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£§‚£Ñ‚£Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£∂‚†É‚†â‚†°‚°†‚†§‚†ä‚†Ä‚††‚£Ä‚£Ä‚°†‚†î‚†í‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚¢ü‚†ø‚†õ‚†õ‚†Å\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚†∂‚†ñ‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£∂‚£ø‚£ø‚†ü‚°±‚†Å‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£æ‚£ø‚°á‚†Ä‚¢Ä‚°†‚†Ä‚†Ä‚†Ä‚†à‚†ë‚¢¶‚£Ñ‚£Ä‚£Ä‚£Ω‚£¶‚£§‚£æ‚£ø‚†ø‚†ø‚†ø‚£ø‚°Ü‚†Ä‚†Ä‚¢Ä‚†∫‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚°∞‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ß‚£†‚†ä‚£†‚£∂‚£æ‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚†ø‚†õ‚¢ø‚£ø‚£´‚¢ï‚°†‚¢•‚£à‚†Ä‚†ô‚†Ä‚†∞‚£∑‚£ø‚£ø‚£ø‚°ø‚†ã‚¢Ä‚†ú‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚¢ø‚£ø‚£ø‚£ø‚£ø‚£∞‚£ø‚£ø‚†ø‚£õ‚°õ‚¢õ‚£ø‚£ø‚£ü‚¢Ö‚†Ä‚†Ä‚¢ø‚£ø‚†ï‚¢∫‚£ø‚°á‚†©‚†ì‚†Ç‚¢Ä‚†õ‚†õ‚†ã‚¢Å‚£†‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†ò‚¢∂‚°∂‚¢∂‚£∂‚£¶‚£§‚£§‚£§‚£§‚£§‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚†ü‚†Å‚°°‚£í‚£¨‚¢≠‚¢†‚†ù‚¢ø‚°°‚†Ç‚†Ä‚†à‚†ª‚£Ø‚£ñ‚£í‚£∫‚°≠‚†Ç‚¢Ä‚†à‚£∂‚£∂‚£æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†ô‚†≥‚£å‚°õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ª‚£µ‚£®‚£ø‚£ø‚°è‚¢Ä‚†™‚†é‚†ô‚†ø‚£ã‚†¥‚°É‚¢∏‚£∑‚£§‚£∂‚°æ‚†ã‚†à‚†ª‚£∂‚£∂‚£∂‚£∑‚£∂‚£∑‚£ø‚£ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢¶‚£å‚°ô‚†õ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†©‚†≠‚°≠‚†¥‚†ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†ì‚†¶‚£Ñ‚°â‚†õ‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£∞‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£∞‚†§‚£≥‚£ø‚£ø‚£ø‚£ø‚£ü‚†ë‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ì‚†í‚†í‚†∂‚¢∫‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ñ‚£Ä‚£¥‚£ø‚£Ø‚£§‚£î‚†í‚†ö‚£í‚£â‚£â‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†π‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£≠‚£â‚£â‚£§‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚°Å‚°Ü‚†ô‚¢∂‚£Ä‚†Ä‚¢Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£¥‚£∂‚£æ‚£ø‚£ü‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢õ‚£©‚£¥‚£ø‚†á‚°á‚†∏‚°Ü‚†ô‚¢∑‚£Ñ‚†ª‚£ø‚£¶‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£é‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£≠‚£≠‚£≠‚£µ‚£∂‚£æ‚£ø‚£ø‚£ø‚†ü‚¢∞‚¢£‚†Ä‚†à‚†Ä‚†Ä‚†ô‚¢∑‚°é‚†ô‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£ø‚°Ü‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†ü‚†õ‚†ã‚†Å‚¢Ä‚†á‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚¢∏‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ú‚°ø‚°ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£§‚£§‚£§‚£§‚£§‚£§‚£§‚£¥‚°é‚†ñ‚¢π‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†ò‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†õ‚†ã‚°ü‚†Ä‚†Ä‚£∏‚£∑‚£Ä‚£§‚£Ä‚£Ä‚£Ä‚£§‚£§‚£æ‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£≠‚£ì‚°≤‚†¨‚¢≠‚£ô‚°õ‚†ø‚£ø‚£ø‚£∂‚£¶‚£Ä‚†Ä‚°ú‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£≠‚£õ‚£ì‚†∂‚†¶‚†•‚£Ä‚†ô‚†ã‚†â‚†â‚†ª‚£Ñ‚£Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£Ü‚†ê‚£¶‚£†‚£∑‚†ä‚†Å‚†Ä‚†Ä‚°≠‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢â‚£õ‚°õ‚¢ª‚°ó‚†Ç‚†Ä‚¢Ä‚£∑‚£Ñ‚†à‚¢Ü‚†â‚†ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚°ü‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£â‚¢Å‚£¥‚£ø‚£ø‚£ø‚£æ‚°á‚¢Ä‚£Ä‚£º‚°ø‚£ø‚£∑‚°å‚¢ª‚£¶‚°Ä‚†Ä‚†à‚†ô‚†õ‚†ø‚†è‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚°Ñ‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚†õ‚†õ‚¢Ø‚°â‚†â‚†â‚†â‚†â‚†õ‚¢º‚£ø‚†ø‚†ø‚†¶‚°ô‚£ø‚°Ü‚¢π‚£∑‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n\
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ø‚†Ñ‚†à‚†ª‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†õ‚†õ‚†ø‚†õ‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚†ø‚†ø‚†ø‚†ø‚†ü‚†â‚†Ä‚†Ä‚†§‚†¥‚†∂‚†å‚†ø‚†ò‚†ø‚†ø‚†ø‚†ø‚†∂‚†§‚†Ä‚†Ä‚†Ä‚†Ä\n\
")

int testing_ft_calloc();
int testing_ft_memmove();
int testing_ft_memcpy();
int testing_ft_atoi();
int testing_ft_itoa();
int testing_ft_split();
int testing_ft_string_funcs();
int testing_ft_split();
int testing_ft_strlcpy_strlcat();
int testing_ft_strl();
int testing_ft_striteri_bzero_strncmp();
int testing_ft_isalpha_isdigit_toupper_tolower();
int testing_ft_lst_last();
int testing_ft_lstadd_back();
int testing_ft_lstclear();
int testing_ft_lstadd_front();

#endif